@model ElCaminoDeCostaRica.Models.Stage
@{
    List<SelectListItem> routes = new List<SelectListItem>();
    foreach (var route in ViewBag.Data)
    {
        routes.Add(
        new SelectListItem { Text = Convert.ToString(route.id), Value = Convert.ToString(route.id) }
        );
    } }

<html>
<head>
    
</head>
<body>
    <div class="container_Green formTitleCenter">
        @if (ViewBag.Resultado != null)
        {
            <div class="alert-success">
                <h3> @ViewBag.Message </h3>
            </div>
        }
        @if (ViewBag.Message != null)
        {
            if (ViewBag.Success)
            {
                <div class="alert-success">
                    <h3> @ViewBag.Message </h3>
                </div>
            }
            else
            {
                <div class="alert-danger">
                    <h3> @ViewBag.Message </h3>
                </div>
            }
        }

        <div id="map"></div>

        @using (Html.BeginForm("addStage", "Stage", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            <h1 class="formTitle" style="text-align:center">Crear etapa</h1>
            <div class="form-horizontal">

                <div class="form-group">
                    @Html.LabelFor(model => model.start, new { @class = "formLabel" })
                    @Html.TextBoxFor(model => model.start, new { @class = "form-control, formInput" })
                    @Html.ValidationMessageFor(model => model.start, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.finish, new { @class = "formLabel" })
                    @Html.TextBoxFor(model => model.finish, new { @class = "formcontrol, formInput" })
                    @Html.ValidationMessageFor(model => model.finish, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.distance, new { @class = "formLabel" })
                    @Html.TextBoxFor(model => model.distance, new { @class = "formcontrol, formInput" })
                    @Html.ValidationMessageFor(model => model.distance, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.minAltimetry, new { @class = "formLabel" })
                    @Html.TextBoxFor(model => model.minAltimetry, new { @class = "formcontrol, formInput" })
                    @Html.ValidationMessageFor(model => model.minAltimetry, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.maxAltimetry, new { @class = "formLabel" })
                    @Html.TextBoxFor(model => model.maxAltimetry, new { @class = "formcontrol, formInput" })
                    @Html.ValidationMessageFor(model => model.maxAltimetry, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.idRoute, new { @class = "formLabel" })
                    @Html.DropDownListFor(model => model.idRoute, routes, "-Sin selección - ", new { @class = "form - control" })
                    @Html.ValidationMessageFor(model => model.idRoute, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>

                <input id="submitButton" type="submit" class="btn btn-success btnCreate" value="Crear" />
            </div>

        }
    </div>
</body>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
</html>

